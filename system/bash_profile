
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color) color_prompt=yes;;
esac
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
color_prompt=yes
else
color_prompt=
fi
fi

if [ "$color_prompt" = yes ]; then
  if [[ "$TERM" = *"256color" ]]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[38;5;109m\]\u\[\033[00m\] \[\033[38;5;143m\]\w\[\033[00m\] \$ '
  else
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;36m\]\u\[\033[00m\] \[\033[01;32m\]\w\[\033[00m\] \$ '
  fi
# else
#   PS1='${debian_chroot:+($debian_chroot)}\u \w \$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
;;
*)
;;
esac

# Set LS_COLORS
if [ -x /usr/bin/dircolors ]; then
  test -r $HOME/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Prevent shell scripting mistakes (but not every mistakes!)
# set -euo pipefail; IFS=$'\n\t'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# TODO(changwon): checkout dotfiles repository if needed
if [ ! -h $HOME/.bash_aliases ]; then
  ln -s $HOME/dotfiles/alias/bash_aliases $HOME/.bash_aliases
fi
source $HOME/.bash_aliases

# tmux conf
if [ ! -h $HOME/.tmux.conf ]; then
  ln -s $HOME/dotfiles/alias/tmux.conf $HOME/.tmux.conf
fi
# source $HOME/devsisters.sh


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
eval "`dircolors -b`"
# Enable color support
ls --color -d . &> /dev/null && alias ls='ls --color=auto' || alias ls='ls -G'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
#alias dir='dir --color=auto'
#alias vdir='vdir --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
. /etc/bash_completion
fi

# Prompt function start
RPROMPT='%{$(echotc UP 1)%}$(_aws_kube_tf)%{$(echotc DO 1)%}'

function git_branch() { 
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/';
}

# function _curr_tf() {
# if [[ -d .terraform ]]; then
# cat .terraform/environment 2>/dev/null || print 'none'
#   fi
# }

function _aws_kube_tf() {
  aws=$(_curr_aws)
  k8s=$(_curr_kube)
  tf=$(_curr_tf)
  color='green'

  echo $marker' '$(_decor aws $color $aws)' '$(_decor tf $color $tf)' '$(_decor k8s $color $k8s)
}


function _curr_kube() {
  if [[ -f ~/.kube/config ]]; then
context=$(cat ~/.kube/config | grep "current-context:" | sed "s/current-context: //")
echo ' '$context
  fi
}

function _curr_aws() {
  if [[ -n $AWS_PROFILE ]]; then
echo ' '$AWS_PROFILE
  fi
}

function _decor() {
  if [[ ! -z $3 ]]; then
echo '('$1':%F{'$2'}'$3'%f)'
  fi
}
# Prompt function end

export LANG=en_US.UTF-8
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
LC_ALL=en_US.utf8
HOST='\e[2;36m\]@\h\e[0m'
TIME='\e[1;31m\]\D{%FT%T} \e[1;32m'
# LOCATION=':\033[01;34m\]`pwd | sed "s#\(/[^/]\{1,\}/[^/]\{1,\}/[^/]\{1,\}/\).*\(/[^/]\{1,\}/[^/]\{1,\}\)/\{0,1\}#\1_\2#g"`'
PWDLOCATION=':\e[1;94m\W/\e[0m'
GITBRANCH=' \e[33mgit [ \e[1;33m$(git branch 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/\1/")\e[0;33m ]\e[0m'
TFENV='\e[35m tf [ \e[1;35m$(cat .terraform/environment 2>/dev/null)\e[0;35m ]\e[0m'
K8SENV='\e[96m k8s [ \e[1;96m$(cat ~/.kube/config | grep "current-context:" | sed "s/current-context: //")\e[0;96m ]\e[0m'
# $(cat ~/.kube/config | grep "current-context:" | sed "s/current-context: //")
_PROMPT='\n\$ '
PS1=$TIME$USER$HOST$PWDLOCATION$GITBRANCH$TFENV$K8SENV$_PROMPT
PS2='\e[1;36m>'


source $HOME/.git/git-completion.bash

# macOS Notification
# Usage: (some task that takes long time); notify End Task
notify () {
osascript -e "display notification \"$*\" sound name \"Glass\" with title \"Shell Notification\""
say "$*"
}

# thefuck alias
eval $(thefuck --alias)

# Elixir bin path
export PATH="$PATH:/usr/local/bin/elixir"

# Go paths
export GOPATH=$HOME/workspace/go
export GOROOT=
export GOBIN=$GOPATH/bin
export PATH="$PATH:$GOPATH:$GOBIN"
export GO111MODULE=on

# Mysql path
export PATH="$PATH:/usr/local/mysql/bin"

export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

# Organization-only aliases and shell scripts (not checked-in to remote repository)
# Should come after Go paths
if [ ! -h $HOME/.devsisters.sh ]; then
  ln -s /Volumes/Private/Keybase/private/changwonlee/devsisters.sh $HOME/.devsisters.sh
fi
source $HOME/.devsisters.sh



# Python mkvirtualenvwrapper paths
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/workspace
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
# source /usr/local/bin/virtualenvwrapper.sh

# Docker
export DOCKER_HOST=tcp://192.168.99.100:2376
export DOCKER_MACHINE_HOST_NAME=default
export DOCKER_CERT_PATH=$HOME/.docker/machine/machines/default
export DOCKER_TLS_VERIFY=1
# for Mac you apparently need to unset Docker env vars
unset ${!DOCKER*}

# AWS CLI Completer
complete -C '$(which aws_completer)' aws

# SAML2AWS
export SAML2AWS_SESSION_DURATION=43200
export AWS_SDK_LOAD_CONFIG=1

export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
export PATH=$PATH:$HOME/.istioctl/bin

# tfenv
export PATH="$HOME/.tfenv/bin:$PATH"

# Kubectl
source <(kubectl completion bash)
export KUBE_CONFIG_PATH=$HOME/.kube/config
export KUBE_EDITOR=nvim


# Organization-only aliases and shell scripts (not checked-in to remote repository)
if [ -f $HOME/.devsisters.sh ]; then
    ln -sf /Volumes/Keybase/private/changwonlee/devsisters.sh $HOME/.devsisters.sh
    source $HOME/.devsisters.sh
fi


export PATH="$HOME/.cargo/bin:$PATH"
export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"

# asdf
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

